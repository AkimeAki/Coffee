---
import "@akimeaki/reset-css";
import "@/global.scss";
import "@/panda.css";
import { css } from "@/styled-system/css";

interface Props {
	title?: string;
	description?: string;
	ogType?: string;
	ogImage?: string | undefined;
	notFound?: boolean;
	schema?: unknown[];
}

const {
	title,
	description,
	ogType = "article",
	ogImage = `${Astro.site}default-ogp.png`,
	notFound = false,
	schema = []
} = Astro.props;
export const serviceTitle = "Aki Coffee☕";
const pageTitle = title === undefined ? serviceTitle : `${title} | ${serviceTitle}`;
const pageDescription =
	description ??
	"このブログは記事の内容に沿って、AIが背景画像を生成してくれます。書いてて楽しいです。Coffeeに意味はないです。";

const path = Astro.url.pathname.replace(/^\//, "").replace(/\.html$/, "");

const baseSchema = {
	"@context": "https://schema.org",
	"@type": "WebSite",
	name: `${serviceTitle} - AIが背景画像を生成するブログ`,
	alternateName: serviceTitle,
	description: pageDescription,
	url: Astro.site
};

const schemaList = [...schema, baseSchema];
---

<!doctype html>
<html lang="ja" transition:animate="fade">
	<head prefix="og: http: ogp.me ns#">
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="description" content={pageDescription} />
		<meta name="format-detection" content="email=no,telephone=no,address=no" />
		<meta name="author" content="彩季" />
		<meta property="og:url" content={`${Astro.site}${path}`} />
		<meta property="og:type" content={ogType} />
		<meta property="og:title" content={`${title ?? serviceTitle} - AIが背景画像を生成するブログ`} />
		<meta property="og:description" content={pageDescription} />
		<meta property="og:site_name" content="Aki Coffee" />
		<meta property="og:image" content={ogImage} />
		<meta name="twitter:card" content="summary" />
		<meta name="twitter:site" content="@Akime_Aki" />
		<meta name="twitter:title" content={title ?? serviceTitle} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={ogImage} />
		<!-- Google Tag Manager -->
		<script is:inline>
			// prettier-ignore
			(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});const f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KP36GT3H');
		</script>
		<!-- End Google Tag Manager -->
		{schemaList.map((schema) => <script type="application/ld+json" is:inline set:html={JSON.stringify(schema)} />)}
		{!notFound && <link rel="canonical" href={`${Astro.site}${path}`} />}
		<link rel="icon" href="/favicon.ico" />
		<title>{pageTitle} - AIが背景画像を生成するブログ</title>
		<link rel="sitemap" href="/sitemap-index.xml" />
		<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
	</head>
	<body>
		<!-- Google Tag Manager (noscript) -->
		<noscript>
			<iframe
				src="https://www.googletagmanager.com/ns.html?id=GTM-KP36GT3H"
				height="0"
				width="0"
				style="display:none;visibility:hidden"></iframe>
		</noscript>
		<!-- End Google Tag Manager (noscript) -->

		<div
			id="sns-links"
			class={css`
				position: fixed;
				top: 20px;
				right: 20px;
				display: flex;
				gap: 20px;

				a {
					display: block;
					width: 20px;
					aspect-ratio: 1/1;
					mask-repeat: no-repeat;
					mask-position: center center;
					mask-size: contain;
				}
			`}
		>
			<a
				class={css`
					-webkit-mask: url("/icon/twitter.png") no-repeat center center / contain;
					mask-image: url("/icon/twitter.png");
					background-color: #1a90d9;
				`}
				href="https://twitter.com/Akime_Aki"
				target="_blank"></a>
			<a
				class={css`
					-webkit-mask: url("/icon/x.png") no-repeat center center / contain;
					mask-image: url("/icon/x.png");
					background-color: #000000;
				`}
				href="https://x.com/Akime_Aki"
				target="_blank"></a>
			<a
				class={css`
					-webkit-mask: url("/icon/github.png") no-repeat center center / contain;
					mask-image: url("/icon/github.png");
					background-color: #1a1e22;
				`}
				href="https://github.com/AkimeAki/Coffee"
				target="_blank"></a>
		</div>
		<header
			class={css`
				padding: 40px 0 0 0;
				max-width: 1200px;
				margin: 0 auto;
				text-align: center;
			`}
		>
			<a
				class={css`
					color: inherit;
					text-decoration: none;
				`}
				href="/"
			>
				<h1
					id="header-title"
					class={css`
						display: inline-block;
						font-size: 25px;
					`}
				>
					Aki ☕ Blog
				</h1>
			</a>
		</header>
		<p
			id="supplement"
			class={css`
				text-align: center;
				margin-top: 10px;
			`}
		>
			AIが背景画像を生成する戯言ブログ
		</p>
		<slot />
	</body>
</html>

<script>
	const isTouchDevice = (): boolean => {
		if (typeof window !== "undefined") {
			return (
				"ontouchstart" in window ||
				navigator.maxTouchPoints > 0 ||
				window.matchMedia("(pointer:coarse)").matches
			);
		}

		return false;
	};

	if (isTouchDevice()) {
		document.body.dataset.touch = "true";
	} else {
		document.body.dataset.touch = "false";
	}

	const touched = (): void => {
		document.body.dataset.touch = "true";
	};

	const move = (e: PointerEvent): void => {
		if (e.pointerType === "mouse") {
			document.body.dataset.touch = "false";
		}

		if (e.pointerType === "touch" || e.pointerType === "pen") {
			document.body.dataset.touch = "true";
		}
	};

	window.addEventListener("touchstart", touched, false);
	window.addEventListener("pointermove", move, false);
</script>
