---
import Layout, { serviceTitle } from "@/layouts/Layout.astro";
import { formatDate } from "@/lib/format-date";
import { getListAllContents } from "@/lib/microcms";
import type { Blog } from "@/lib/microcms";
import { css } from "@/styled-system/css";
import type { GetStaticPaths } from "astro";
import * as cheerio from "cheerio";

export const getStaticPaths = (async () => {
	const response = await getListAllContents<Blog>("blogs");
	return response.map((content) => ({
		params: {
			id: content.id
		},
		props: {
			blog: content
		}
	}));
}) satisfies GetStaticPaths;

const { blog } = Astro.props;

let contents = blog.contents;
const $ = cheerio.load(contents);
$('script[src="//cdn.iframe.ly/embed.js"]').each((_, element) => {
	$(element).remove();
});

contents = $("body").html() ?? "";
const description = `${$("body")
	.text()
	.replace(/\r?\n|\r/g, "")
	.trim()
	.slice(0, 70)}...`;

const schema = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	name: `${blog.title} | ${serviceTitle} - AIが背景画像を生成するブログ`,
	alternateName: `${blog.title} | ${serviceTitle}`,
	description: description,
	url: `${Astro.site}${blog.id}`,
	image: {
		"@type": "ImageObject",
		url: blog.eyecatch ? `${blog.eyecatch.url}?fm=webp` : ""
	},
	datePublished: blog.publishedAt ?? blog.createdAt
};
---

<Layout
	title={blog.title}
	description={description}
	ogImage={blog.eyecatch ? `${blog.eyecatch.url}?fm=webp` : undefined}
	ogType="article"
	schema={[schema]}
>
	<main
		class={css`
			width: 100%;
			max-width: 660px;
			margin: 0 auto;
			padding: 25px 25px 100px 25px;
			transition-duration: 500ms;
			transition-property: opacity;

			body[data-view-image="clear"] & {
				opacity: 0;
				user-select: none;
				pointer-events: none;
			}
		`}
	>
		<time
			class={css`
				font-size: 15px;
				margin-bottom: 40px;
				display: block;
				text-align: right;
				color: white;
			`}
			datetime={blog.publishedAt ?? blog.createdAt}
		>
			{formatDate(blog.publishedAt ?? blog.createdAt)}
		</time>
		<h2
			class={css`
				font-size: 26px;
				margin-bottom: 50px;
				color: white;
			`}
		>
			{blog.title}
		</h2>
		<div
			id="post-content"
			class={css`
				p {
					margin-bottom: 35px;
					font-size: 19px;
					font-weight: normal;
					letter-spacing: 0.1em;
					color: white;

					@media (max-width: 767px) {
						font-size: 17px;
					}

					&:last-child {
						margin-bottom: 0;
					}
				}

				ul {
					font-size: 19px;
					color: white;
					margin-bottom: 35px;

					ul {
						padding-inline-start: 40px;
					}

					&:last-child {
						margin-bottom: 0;
					}
				}

				hr {
					opacity: 0;

					margin-bottom: 35px;
					&:last-child {
						margin-bottom: 0;
					}
				}

				div {
					user-select: none;

					&:not(:last-child) {
						margin-bottom: 35px !important;
					}
				}

				a {
					color: #0a9d5b;
					text-decoration: none;
					font-weight: bold;
					margin: 0 15px 0;

					&:hover {
						color: #61c466;
					}
				}

				.iframely-embed {
					margin-bottom: 35px;
					&:last-child {
						margin-bottom: 0;
					}
				}
			`}
			set:html={contents}
		/>
		<div
			class={css`
				display: none;
				text-align: center;
				color: white;
				margin-top: 60px;
				justify-content: center;
				flex-direction: column;
				align-items: center;

				body[data-touch="true"] & {
					display: flex;
				}

				body[data-touch="false"] & {
					@media (max-width: 1100px) {
						display: flex;
					}
				}
			`}
		>
			<div
				id="click-view-image-touch"
				class={css`
					span {
						display: block;
						text-align: center;
					}
				`}
			>
				<span>背景画像を見る</span>
				<span>Click!</span>
			</div>
		</div>
	</main>
	<div
		id="filter-image-over"
		class={css`
			position: fixed;
			top: 0;
			left: 0;
			width: 100lvw;
			height: 100lvh;
			z-index: -1;
			overflow: hidden;
			opacity: 1;
			transition-duration: 1000ms;
			transition-property: opacity;
		`}
	>
		<img
			class={css`
				object-fit: cover;
				width: 100%;
				height: 100%;
				transform: scale(1.1);
				filter: blur(7px) brightness(20%);
				user-select: none;
				pointer-events: none;
			`}
			src={blog.eyecatch ? `${blog.eyecatch.url}?fm=webp` : ""}
		/>
	</div>
	<div
		id="filter-image"
		class={css`
			position: fixed;
			top: 0;
			left: 0;
			width: 100lvw;
			height: 100lvh;
			z-index: -2;
			overflow: hidden;
		`}
	>
		<img
			class={css`
				object-fit: cover;
				width: 100%;
				height: 100%;
				transform: scale(1.1);
				filter: blur(7px) brightness(20%);
				user-select: none;
				pointer-events: none;
			`}
			src={blog.eyecatch ? `${blog.eyecatch.url}?fm=webp` : ""}
		/>
	</div>
	<div
		id="click-text"
		class={css`
			position: fixed;
			top: 0;
			left: 0;
			color: white;
			font-weight: bold;
			transform: rotate(30deg);
			opacity: 0;
			white-space: nowrap;
			user-select: none;
			display: none;
			pointer-events: none;
			transition-duration: 500ms;
			transition-property: opacity;
		`}
	>
		Click!!
	</div>
	<script>
		let mouseX = 0;
		let mouseY = 0;
		let currentX = 0;
		let currentY = 0;
		let target: EventTarget | null = null;
		const ease = 0.1;
		let animating = false;
		let isFullView = false;
		let lastUpdateTime = performance.now();
		const maxFPS = 60;
		let isViewImageTouch = false;

		function viewClick() {
			setTimeout(() => {
				const clickText = document.querySelector<HTMLDivElement>("#click-text");

				if (clickText === null) {
					return;
				}

				if (document.body.dataset.touch === "true") {
					return;
				}

				const shouldShow = Math.random() < 0.5;

				if (shouldShow && !animating && !isFullView) {
					clickText.style.display = "block";
					setTimeout(() => {
						clickText.style.display = "";
					}, 1000);
				}

				viewClick();
			}, 5000);
		}

		function mouseMove(e: MouseEvent) {
			mouseX = e.clientX;
			mouseY = e.clientY;
			target = e.target;
		}

		function viewImageTouch(entries: IntersectionObserverEntry[]) {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					isViewImageTouch = true;
				} else {
					isViewImageTouch = false;
				}
			});
		}

		const observer = new IntersectionObserver(viewImageTouch, {
			root: null,
			threshold: 0.1
		});

		const clickViewImageTouchElement = document.querySelector<HTMLDivElement>("#click-view-image-touch");
		if (clickViewImageTouchElement !== null) {
			observer.observe(clickViewImageTouchElement);
		}

		function updateMask() {
			const filterImage = document.querySelector<HTMLDivElement>("#filter-image");
			const filterImageOver = document.querySelector<HTMLDivElement>("#filter-image-over");
			const clickText = document.querySelector<HTMLDivElement>("#click-text");
			const postContent = document.querySelector<HTMLDivElement>("#post-content");
			if (filterImage === null || filterImageOver === null || clickText === null || postContent === null) {
				return;
			}

			const now = performance.now();
			const deltaTime = now - lastUpdateTime;

			requestAnimationFrame(updateMask);

			if (animating) {
				return;
			}

			if (isFullView) {
				return;
			}

			if (deltaTime < 1000 / maxFPS) {
				return;
			}

			lastUpdateTime = now - (deltaTime % (1000 / maxFPS));

			let size = "max(10vw, 130px)";

			if (document.body.dataset.touch !== "true") {
				currentX += (mouseX - currentX) * ease;
				currentY += (mouseY - currentY) * ease;

				if (target instanceof HTMLElement && postContent.contains(target)) {
					size = "70px";
					currentX += 8;
					currentY += 8;
				}
			} else {
				if (isViewImageTouch) {
					const clickViewImageTouchElement =
						document.querySelector<HTMLDivElement>("#click-view-image-touch");
					if (clickViewImageTouchElement !== null) {
						const rect = clickViewImageTouchElement.getBoundingClientRect();

						console.log(rect.left, rect.top);
						currentX = rect.left + rect.width / 2;
						currentY = rect.top + rect.height / 2;
					}
				}
			}

			const maskStyle = `radial-gradient(circle ${size} at ${currentX}px ${currentY}px, transparent 0%, black 100%)`;
			filterImage.style.maskImage = maskStyle;
			filterImageOver.style.opacity = "0";
			clickText.style.top = `calc(${currentY}px - 6vw)`;
			clickText.style.left = `calc(${currentX}px + 3vw)`;
			if (document.body.dataset.touch === "true") {
				if (isViewImageTouch) {
					filterImageOver.style.opacity = "0";
				} else {
					filterImageOver.style.opacity = "1";
				}
			} else {
				if (target instanceof HTMLElement && postContent.contains(target)) {
					clickText.style.opacity = "0";
				} else {
					clickText.style.opacity = "1";
				}
				filterImageOver.style.opacity = "0";
			}
		}

		function viewImage(e: MouseEvent) {
			if (animating) {
				return;
			}

			const button = document.querySelector<HTMLDivElement>("#click-view-image-touch");
			const filterImageOver = document.querySelector<HTMLDivElement>("#filter-image-over");

			if (filterImageOver === null) {
				return;
			}

			if (!isFullView && document.body.dataset.touch === "true") {
				if (!(e.target instanceof HTMLElement && button !== null && button.contains(e.target))) {
					return;
				}
			}

			const postContent = document.querySelector<HTMLDivElement>("#post-content");

			if (e.target instanceof HTMLElement && postContent !== null && postContent.contains(e.target)) {
				return;
			}

			const linkElements = document.querySelectorAll<HTMLAnchorElement>("a");
			for (const linkElement of linkElements) {
				if (e.target instanceof HTMLElement && linkElement.contains(e.target)) {
					return;
				}
			}

			animating = true;

			if (animating && !isFullView) {
				document.body.dataset.viewImage = "clear";
			}

			const startTime = performance.now();
			const duration = 1000;
			const startRadius = 10;
			const endRadius = 200;

			function animateExpand(time: number) {
				const filterImage = document.querySelector<HTMLDivElement>("#filter-image");
				const filterImageOver = document.querySelector<HTMLDivElement>("#filter-image-over");

				if (filterImage === null || filterImageOver === null) {
					return;
				}

				let radius = 0;
				const elapsed = time - startTime;
				const progress = Math.min(elapsed / duration, 1);
				if (isFullView) {
					radius = endRadius - (endRadius - startRadius) * progress;
				} else {
					radius = startRadius + (endRadius - startRadius) * progress;
				}

				const maskStyle = `radial-gradient(circle max(${radius}vw, 130px) at ${currentX}px ${currentY}px, transparent 0%, black 100%)`;
				filterImage.style.maskImage = maskStyle;
				filterImageOver.style.opacity = "0";

				if (progress < 1) {
					requestAnimationFrame(animateExpand);
				} else {
					animating = false;
					isFullView = !isFullView;

					if (isFullView) {
						document.body.dataset.viewImage = "clear";
					} else {
						document.body.dataset.viewImage = "filter";
					}
				}
			}

			requestAnimationFrame(animateExpand);
		}

		function mouseLeave() {
			const filterImageOver = document.querySelector<HTMLDivElement>("#filter-image-over");
			const clickText = document.querySelector<HTMLDivElement>("#click-text");
			if (filterImageOver === null || clickText === null) {
				return;
			}

			if (animating) {
				return;
			}

			if (isFullView) {
				return;
			}

			filterImageOver.style.opacity = "1";
			clickText.style.opacity = "0";
		}

		function scroll(e: WheelEvent | TouchEvent) {
			if (isFullView || animating) {
				e.preventDefault();
			}
		}

		updateMask();
		viewClick();

		document.addEventListener("mousemove", mouseMove);
		document.addEventListener("mouseleave", mouseLeave);
		document.addEventListener("click", viewImage);
		document.addEventListener("wheel", scroll, { passive: false });
		document.addEventListener("touchmove", scroll, { passive: false });

		document.addEventListener(
			"astro:after-swap",
			() => {
				if (location.pathname === "/") {
					document.removeEventListener("mousemove", mouseMove);
					document.removeEventListener("mouseleave", mouseLeave);
					document.removeEventListener("click", viewImage);
					document.removeEventListener("wheel", scroll);
					document.removeEventListener("touchmove", scroll);

					observer.disconnect();
				} else {
					updateMask();
					viewClick();
					document.addEventListener("mousemove", mouseMove);
					document.addEventListener("mouseleave", mouseLeave);
					document.addEventListener("click", viewImage);
					document.addEventListener("wheel", scroll, { passive: false });
					document.addEventListener("touchmove", scroll, { passive: false });
					const clickViewImageTouchElement =
						document.querySelector<HTMLDivElement>("#click-view-image-touch");
					if (clickViewImageTouchElement !== null) {
						observer.observe(clickViewImageTouchElement);
					}
				}
			},
			false
		);
	</script>
	<div
		class={css`
			position: fixed;
			top: 0;
			left: 0;
			width: 100lvw;
			height: 100lvh;
			z-index: -3;
			overflow: hidden;
		`}
	>
		<img
			src={blog.eyecatch ? `${blog.eyecatch.url}?fm=webp` : ""}
			alt=""
			class={css`
				object-fit: cover;
				width: 100%;
				height: 100%;
				transform: scale(1.1);
				user-select: none;
				pointer-events: none;
			`}
		/>
	</div>
</Layout>

<script>
	import { annotate } from "rough-notation";

	function annotation() {
		const supplement = document.querySelector<HTMLParagraphElement>("#supplement > p");
		if (supplement !== null) {
			const supplementAnnotate = annotate(supplement, { type: "underline", color: "white" });
			supplementAnnotate.show();
		}

		const links = document.querySelectorAll<HTMLAnchorElement>("#post-content > p >  a");
		links.forEach((link) => {
			const linkAnnotate = annotate(link, { type: "highlight", color: "white", iterations: 5 });
			linkAnnotate.show();
		});

		const hrs = document.querySelectorAll<HTMLHRElement>("#post-content hr");
		hrs.forEach((hr) => {
			const hrAnnotate = annotate(hr, { type: "strike-through", color: "white" });
			hrAnnotate.show();
		});
	}

	document.fonts.ready.then(() => {
		annotation();
	});

	document.addEventListener(
		"astro:after-swap",
		() => {
			annotation();
		},
		false
	);
</script>

<script>
	if ((window as any).twttr?.widgets !== undefined) {
		(window as any).twttr.widgets.load();
	}

	if ((window as any).iframely !== undefined) {
		(window as any).iframely.load();
	}

	document.addEventListener(
		"astro:after-swap",
		() => {
			if ((window as any).twttr?.widgets !== undefined) {
				(window as any).twttr.widgets.load();
			}

			if ((window as any).iframely !== undefined) {
				(window as any).iframely.load();
			}
		},
		false
	);
</script>

<style lang="scss" is:global>
	#header-title {
		color: white;
	}

	#sns-links {
		a {
			background-color: white;
		}
	}

	header {
		transition-duration: 500ms;
		transition-property: opacity;

		body[data-view-image="clear"] & {
			opacity: 0;
			user-select: none;
			pointer-events: none;
		}
	}

	#supplement {
		color: white;
		transition-duration: 500ms;
		transition-property: opacity;

		body[data-view-image="clear"] & {
			opacity: 0;
			user-select: none;
			pointer-events: none;
		}
	}
</style>
