---
import Layout from "@/layouts/Layout.astro";
import { formatDate } from "@/lib/format-date";
import { getContentsDetail, getListContents } from "@/lib/microcms";
import cheerio from "cheerio";
import type { Blog } from "@/lib/microcms";

interface pathType {
	params: {
		id: string;
	};
}

export const getStaticPaths = async (): Promise<pathType[]> => {
	const response = await getListContents<Blog>("blogs", { fields: ["id"] });
	return response.contents.map((content) => ({
		params: {
			id: content.id
		}
	}));
};

const { id } = Astro.params;
if (id === undefined) {
	return;
}

const blog = await getContentsDetail<Blog>("blogs", id);

const $ = cheerio.load(blog.contents);
const description = $.text().match(/[^。]+/) !== null ? $.text().match(/[^。]+/) + "。" : undefined;
---

<Layout
	title={blog.title}
	description={`${description}`}
	ogImage={`https://r2.coffee.aki.wtf/${blog.id}.png`}
	ogType="article"
>
	<p id="supplement">最後までスクロールすると、<br />ページ右下のめくれてるとこから背景画像見れるよ</p>
	<main id="post-wrapper">
		<time class="post-date" datetime={blog.publishedAt ?? blog.createdAt}>
			{formatDate(blog.publishedAt ?? blog.createdAt)}
		</time>
		<h2 class="post-title">{blog.title}</h2>
		<div class="post-content" set:html={blog.contents} />
	</main>
	<div id="bg-image-wrapper">
		<img id="bg-image" src={`https://r2.coffee.aki.wtf/${blog.id}.png`} />
	</div>
	<div id="curl" data-status="close" data-view="false"></div>
	<div id="curl-image" data-view="false">
		<img src={`https://r2.coffee.aki.wtf/${blog.id}.png`} alt="" />
	</div>
</Layout>

<style lang="scss">
	:global(#title) {
		color: white;
	}

	:global(#description) {
		color: white;
	}

	:global(#wrapper) {
		position: relative;

		:global(#sns-link) {
			:global(a) {
				background-color: white !important;
			}
		}
	}

	#supplement {
		text-align: center;
		color: white;
		font-size: 14px;

		br {
			display: none;
			@media screen and (max-width: 650px) {
				display: block;
			}
		}
	}

	#bg-image-wrapper {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
		overflow: hidden;

		#bg-image {
			object-fit: cover;
			width: 100%;
			height: 100%;
			transform: scale(1.1);
			filter: blur(7px) brightness(45%);
		}
	}

	#post-wrapper {
		width: 100%;
		max-width: 660px;
		margin: 0 auto;
		padding: 25px 25px 100px 25px;

		.post-title {
			font-size: 18px;
			margin-bottom: 50px;
			color: white;
		}

		.post-content {
			:global(p) {
				margin-bottom: 35px;
				font-size: 16px;
				color: white;

				&:last-child {
					margin-bottom: 0;
				}
			}
		}

		.post-date {
			font-size: 15px;
			margin-bottom: 40px;
			display: block;
			text-align: right;
			color: white;
		}

		.post-link {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}
	}

	#curl {
		position: absolute;
		bottom: 0;
		right: 0;
		width: 0;
		height: 0;
		cursor: pointer;
		background: linear-gradient(
			315deg,
			transparent,
			transparent 45%,
			transparent 50%,
			#aaa 50%,
			#bbb 56%,
			#ccc 62%,
			#f3f3f3 80%,
			#fff 100%
		);
		transition-duration: 500ms;
		transition-timing-function: ease-in-out;
		transition-property: width, height;
		z-index: 2;

		&[data-view="true"] {
			width: 50px;
			height: 50px;
		}
	}

	#curl-image {
		position: absolute;
		bottom: 0;
		right: 0;
		width: 0;
		height: 0;
		max-width: 100%;
		max-height: 100svh;
		transition-duration: 500ms;
		transition-timing-function: ease-in-out;
		transition-property: width, height;
		z-index: 1;
		overflow: hidden;

		&[data-view="true"] {
			width: 50px;
			height: 50px;
		}

		img {
			position: absolute;
			bottom: 0;
			right: 0;
			width: 100svw;
			height: 100svh;
			object-fit: cover;
			transform: scale(1.1);
		}
	}
</style>

<script>
	const curlView = () => {
		const wrapper = document.querySelector<HTMLElement>("#wrapper");
		const curl = document.querySelector<HTMLElement>("#curl");
		const curlImage = document.querySelector<HTMLElement>("#curl-image");
		if (wrapper !== null && curl !== null && curlImage !== null) {
			curl.style.bottom = -1 * wrapper.scrollTop + "px";
			curlImage.style.bottom = -1 * wrapper.scrollTop + "px";

			const scrollBottom = wrapper.scrollHeight - wrapper.offsetHeight - wrapper.scrollTop;
			if (scrollBottom < 10) {
				curl.dataset.view = "true";
				curlImage.dataset.view = "true";
			} else {
				curl.dataset.view = "false";
				curlImage.dataset.view = "false";
			}
		}
	};

	let size = 0;
	const resizeCurl = () => {
		const curl = document.querySelector<HTMLElement>("#curl");
		const curlImage = document.querySelector<HTMLElement>("#curl-image");

		if (curl !== null && curlImage !== null) {
			size = Math.max(window.innerWidth, window.innerHeight) * 2;

			if (curl.dataset.status === "open") {
				curl.style.width = size + "px";
				curl.style.height = size + "px";

				curlImage.style.width = size + "px";
				curlImage.style.height = size + "px";
			}
		}
	};

	window.addEventListener(
		"resize",
		() => {
			resizeCurl();
			curlView();
		},
		false
	);
	resizeCurl();

	const curlToggle = () => {
		const curl = document.querySelector<HTMLElement>("#curl");
		const curlImage = document.querySelector<HTMLElement>("#curl-image");
		const wrapper = document.querySelector<HTMLElement>("#wrapper");

		if (wrapper !== null && curl !== null && curlImage !== null) {
			curl.addEventListener("click", () => {
				if (curl.dataset.status === "close") {
					curl.dataset.status = "open";

					curl.style.width = size + "px";
					curl.style.height = size + "px";
					curlImage.style.width = size + "px";
					curlImage.style.height = size + "px";
				} else {
					curl.dataset.status = "close";

					curl.style.width = "";
					curl.style.height = "";
					curlImage.style.width = "";
					curlImage.style.height = "";
				}
			});

			wrapper.addEventListener("scroll", curlView);
		}
	};

	document.addEventListener(
		"astro:after-swap",
		() => {
			curlToggle();
			curlView();
		},
		false
	);

	curlToggle();
	curlView();
</script>
