---
import Layout from "@/layouts/Layout.astro";
import { formatDate } from "@/lib/format-date";
import { getListAllContents } from "@/lib/microcms";
import type { Blog } from "@/lib/microcms";
import { css, cx } from "@/styled-system/css";
import * as cheerio from "cheerio";

const posts = await getListAllContents<Blog>("blogs");
---

<Layout ogType="blog">
	<main
		class={css`
			width: 100%;
			max-width: 814px;
			margin: 0 auto;
			padding: 25px 25px 100px 25px;
			display: grid;
			grid-template-columns: 1fr 1fr 1fr;
			column-gap: 30px;
			row-gap: 40px;

			@media screen and (max-width: 700px) {
				grid-template-columns: 1fr 1fr;
			}

			@media screen and (max-width: 520px) {
				grid-template-columns: 1fr;
			}
		`}
	>
		{
			posts.map((post) => {
				let contents = post.contents;
				const $ = cheerio.load(contents);
				$("div").each((_, element) => {
					$(element).remove();
				});

				contents = $("body").html() ?? "";

				return (
					<div
						class={cx(
							"post-card",
							css`
								position: relative;
								display: flex;
								flex-direction: column;
								gap: 15px;
								text-decoration: none;
							`
						)}
						aria-label={`記事『${post.title}』を読む`}
						data-bg-src={post.eyecatch ? `${post.eyecatch.url}?fm=webp` : ""}
					>
						<div
							class={cx(
								"post-content-wrapper",
								css`
									position: relative;
									padding: 30px;
									height: 150px;
									overflow: hidden;
								`
							)}
						>
							<div
								class={cx(
									"post-content-bg-image",
									css`
										position: absolute;
										top: 0;
										left: 0;
										width: 100%;
										height: 100%;
										user-select: none;
										pointer-events: none;
										z-index: -1;
										opacity: 0;
										transition-duration: 400ms;
										transition-property: opacity;

										@media (hover: hover) {
											.post-card:hover & {
												opacity: 1;
											}
										}
									`
								)}
							>
								<img
									class={css`
										width: 100%;
										height: 100%;
										object-fit: cover;
										filter: blur(5px);
										user-select: none;
										pointer-events: none;
									`}
									loading="lazy"
									src={post.eyecatch ? `${post.eyecatch.url}?fm=webp&w=250` : ""}
								/>
							</div>
							<div
								class={css`
									p {
										font-size: 5px;
									}
								`}
								set:html={contents}
							/>
						</div>
						<div>
							<h2
								class={css`
									font-size: 22px;
									line-height: 25px;
								`}
							>
								{post.title}
							</h2>
							<time
								class={css`
									font-size: 16px;
								`}
								datetime={post.publishedAt ?? post.createdAt}
							>
								{formatDate(post.publishedAt ?? post.createdAt)}
							</time>
						</div>
						<a
							class={css`
								position: absolute;
								top: 0;
								left: 0;
								width: 100%;
								height: 100%;
							`}
							href={`/${post.id}`}
						/>
					</div>
				);
			})
		}
	</main>
</Layout>

<script>
	import { annotate } from "rough-notation";

	const annotation = () => {
		const postCards = document.querySelectorAll<HTMLDivElement>(".post-content-wrapper");
		postCards.forEach((postCard) => {
			const postCardAnnotate = annotate(postCard, { type: "box", color: "#ffd9c6" });
			postCardAnnotate.show();
		});
	};

	document.fonts.ready.then(() => {
		annotation();
	});

	document.addEventListener("astro:after-swap", () => {
		annotation();
	});
</script>

<script>
	document.addEventListener(
		"astro:page-load",
		() => {
			const postCards = document.querySelectorAll<HTMLAnchorElement>(".post-card");
			postCards.forEach((postCard) => {
				const loadImage = () => {
					const src = postCard.dataset.bgSrc;
					if (src === undefined) {
						return;
					}

					const image = new Image();
					image.src = src;
				};

				postCard.addEventListener("touchstart", loadImage);
				postCard.addEventListener("mouseover", loadImage);
				postCard.addEventListener("touchend", () => {
					const imageWrap = postCard.querySelector<HTMLDivElement>(".post-content-bg-image");
					if (imageWrap !== null) {
						imageWrap.style.opacity = "";
					}
				});
			});
		},
		false
	);
</script>
